openapi: 3.0.2
info:
  title: Reviews API
  description: Review application external APIs

  version: "1.0.1"
servers:
  - url: https://api.etrusted.com

paths:
  "/channels/{channelId}/customer-reviews":
    get:
      deprecated: true
      summary: Get a list of customer reviews
      tags:
        - Customer Reviews Endpoints (Deprecated)
      description: |
        **Note: This endpoint is deprecated.**
        Use the new endpoint listed under [Reviews > Endpoints](/reference/getreviews).

        This endpoint retrieves your customer reviews by channel ID.
        The result set can be modified using a set of filters.

        The path must contain a `channelId`. Note that this must be the channel ID that was assigned by *eTrusted* and *not* a user-defined ID.

        Query parameters can be added to the request, separated by `&`.

        Conceptually, there are two types of categories for the query parameters: actual filter parameters on the one hand, `rating`, `submittedAfter` and `submittedBefore`, and pagination parameters on the other, `count`, `after` and `before`.
        See our guide on [paginating response data](/reference/pagination) for more information.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: path
          name: channelId
          required: true
          schema:
            type: string
          description: |
            The ID of the channel for which a list of customer reviews will be returned.

            Example: `chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: after
          schema:
            type: string
          required: false
          description: |
            `after` is a customer review ID. The list of customer reviews in the response will only contain customer reviews submitted earlier than the customer review with this ID.

            Example: `rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: before
          schema:
            type: string
          required: false
          description: |
            `before` is a customer review ID. The list of customer reviews in the response will only contain customer reviews submitted later than the customer review with this ID.

            Example: `rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: submittedAfter
          schema:
            type: string
          required: false
          description: |
            `submittedAfter` is a timestamp in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of customer reviews will only contain customer reviews submitted with a later timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: submittedBefore
          schema:
            type: string
          required: false
          description: |
            `submittedBefore` is a timestamp in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of customer reviews will only contain customer reviews submitted with an earlier timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: count
          schema:
            type: integer
            default: 50
          required: false
          description: |
            The desired number of customer reviews to be retrieved per page.

            **NB: This can be set to any number from 1 to 1000 with 1000 being the maximum number of records you can get per a page**
        - in: query
          name: rating
          description: |
            A comma-separated list of star rating values to be retrieved.
            If not set, all customer reviews are listed.

            Example: `1, 2, 5`
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 5
            items:
              type: integer
              enum: [1, 2, 3, 4, 5]
        - in: query
          name: status
          description: |
            A comma-separated list of statuses to be retrieved. If not set, all customer reviews are listed.

            The statuses you can filter for are:

            * `APPROVED`
            * `MODERATION`
            * `REJECTED`

            Example: `APPROVED, MODERATION`

            See [our glossary entry](/docs/glossory#review) for more information on review statuses.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - APPROVED
                - MODERATION
                - REJECTED
        - in: query
          name: type
          description: |
            A comma-separated list of customer review types to be retrieved.
            If not set, all customer reviews are listed.

            The customer review types are:

            * `SERVICE_REVIEW`
            * `PRODUCT_REVIEW`

            Example: `PRODUCT_REVIEW`

            See [our glossary entry](/docs/glossory#review) for more information on review types.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - PRODUCT_REVIEW
                - SERVICE_REVIEW
        - in: query
          name: hasReply
          description: |
            Reduces the list of customer reviews to only match customer reviews that either have been replied to or not. If not set, all customer reviews are listed.

            Example: `true`
          required: false
          schema:
            type: boolean
        - in: query
          name: additionalInformation
          description: |
            A comma-separated list of additional pieces of information to be retrieved with the customer review.

            If this property is not set, none of the of additional information are included in the customer review.

            There are the following valid additional information types:

            * `VETO`, which holds information about a veto by our customer
            * `ATTACHMENTS`, which hold information about file attachments for this review

            Also see the response object `additionalInformation`.

            Example: `[VETO]`
          required: false
          schema:
            type: array
            minItems: 1
            items:
              type: string
              x-extensible-enum:
                - VETO
                - ATTACHMENTS
        - in: query
          name: ignoreStatements
          schema:
            type: boolean
          required: false
          description: |
            Filters the list to ignore [statements](/docs/glossory#statement).
            Default is true.
        - in: query
          name: query
          schema:
            type: string
          required: false
          description: |
            A full-text search query that is matched against the transaction reference and customer email address properties (see the response schema).
            Only matching customer reviews will be included in the response.
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: |
            Specify the date to sort the returned list of reviews by. Possible options:
            * `editedAt`: This is the date when the consumer last changed the review.It sorts the reviews in descending order using the `lastEditedAt` date
            * `updatedAt`:This is the date when the review was last updated. It sorts the reviews in descending order using the `updatedAt` date
            * `submittedAt`: This is the date when the review was created by the consumer. Reviews will be sorted by default in descending order using the `submittedAt` date if the **orderBy** parameter is not set or set to a non existing value.
      responses:
        "200":
          description: The list of customer reviews for the `channelId`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerReviewListResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/channels/{channelId}/customer-reviews/{customerReviewId}":
    get:
      deprecated: true
      summary: Get a customer review by ID
      tags:
        - Customer Reviews Endpoints (Deprecated)
      description: |
        **Note: This endpoint is deprecated.**
        Use the new endpoint listed under [Reviews](https://developers.etrusted.com/etrusted-api.html#tag/Reviews).

        This endpoint retrieves a customer review by its ID and its channel ID.

        The path must contain a `channelId`.
        Note that this must be the channel ID that was assigned by *eTrusted* and *not* a customer-defined ID.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: path
          name: channelId
          required: true
          schema:
            type: string
          description: |
            The ID of the channel for which the customer review will be returned.

            Example: `chl-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: path
          name: customerReviewId
          required: true
          schema:
            type: string
          description: |
            The customer review ID.

            Example: `rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
      responses:
        "200":
          description: The customer review with the specified ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerReviewResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/channels/{channelId}/customer-reviews/{customerReviewId}/vetos":
    post:
      deprecated: true
      summary: Create a veto for a customer review
      tags:
        - Customer Reviews Endpoints (Deprecated)
      operationId: create-veto
      description: |
        **Note: This endpoint is deprecated.**
        Use the new endpoint listed under [Reviews](https://developers.etrusted.com/etrusted-api.html#tag/Reviews).

        This endpoint creates a veto for the specified customer review.
        A veto flags a customer review as inappropriate and suggests that the customer review should be removed or investigated.
        Veto objects consist of a comment, a reason and the associated channel name.

        Note that whenever this method is called, *eTrusted* will create a ticket in Trusted Shops' Review Team board containing the veto data for further investigation.
      parameters:
        - name: channelId
          in: path
          description: The channel UUID.
          required: true
          schema:
            type: string
        - name: customerReviewId
          in: path
          description: The customer review UUID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewVetoRequest"
      responses:
        "200":
          description: The veto has been saved succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewVetoResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  "/reviews":
    get:
      operationId: getReviews
      summary: Get a list of reviews
      tags:
        - Endpoints
      description: |
        This endpoint retrieves reviews for a specific channel, a set of channels or for your entire account.

        The result set can be modified using a set of filters.

        Query parameters can be added to the request, separated by `&`.

        Conceptually, there are two types of categories for the query parameters: actual filter parameters on the one hand, `channels`, `rating`, `submittedAfter` and `submittedBefore`, and pagination parameters on the other, `count`, `after` and `before`.
        See our guide on [paginating response data](/reference/pagination) for more information.

        > **Custom Widget Implementation:** Please note the response may include rejected reviews when using a custom widget. To prevent these from appearing, filter out reviews with the `status` attribute set to `REJECTED`.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: query
          name: channels
          required: false
          schema:
            type: array
            items:
              type: string
          description: |
            The list of channels for which the list of reviews will be returned.

            Example: `channels=chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx1,chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx2`
        - in: query
          name: after
          schema:
            type: string
          required: false
          description: |
            `after` is a review ID. The list of reviews in the response will only contain reviews submitted earlier than the review with this ID.

            Example: `rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: before
          schema:
            type: string
          required: false
          description: |
            `before` is a review ID. The list of reviews in the response will only contain reviews submitted later than the review with this ID.

            Example: `rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: submittedAfter
          schema:
            type: string
          required: false
          description: |
            `submittedAfter` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with a later timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: submittedBefore
          schema:
            type: string
          required: false
          description: |
            `submittedBefore` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with an earlier timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: count
          schema:
            type: integer
            default: 50
          required: false
          description: |
            The desired number of customer reviews to be retrieved per page.

            **NB: This can be set to any number from 1 to 1000 with 1000 being the maximum number of records you can get per a page**

        - in: query
          name: rating
          description: |
            A comma-separated list of star ratings to be retrieved. If not set, all reviews are listed.

            Example: `1, 2, 5`
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 5
            items:
              type: integer
              enum: [1, 2, 3, 4, 5]
        - in: query
          name: status
          description: |
            A comma-separated list of statuses to be retrieved. If not set, all reviews are listed.

            The statuses you can filter for are:

            * `APPROVED`
            * `MODERATION`
            * `REJECTED`

            Example: `APPROVED, MODERATION`

            See [our glossary entry](/docs/glossory#review) for more information on review statuses.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - APPROVED
                - MODERATION
                - REJECTED
        - in: query
          name: type
          description: |
            A comma-separated list of review types to be retrieved.
            If not set, all reviews are listed.

            The review types are:

            * `SERVICE_REVIEW`
            * `PRODUCT_REVIEW`

            Example: `PRODUCT_REVIEW`

            See [our glossary entry](/docs/glossory#review) for more information on review states.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - PRODUCT_REVIEW
                - SERVICE_REVIEW
        - in: query
          name: hasReply
          description: |
            Reduces the list of reviews to only match reviews that either have been replied to or not. If not set, all reviews are listed.

            Example: `true`
          required: false
          schema:
            type: boolean
        - in: query
          name: additionalInformation
          description: |
            A comma-separated list of additional pieces of information to be retrieved with the review.

            If this property is not set, none of the of additional information are included in the review.

            Currently there are the following valid additional information types:

            * `VETO`, which holds information about a veto by our customer
            * `ATTACHMENTS`, which hold information about file attachments for this review

            Example: `[VETO]`
          required: false
          schema:
            type: array
            minItems: 1
            items:
              type: string
              x-extensible-enum:
                - VETO
                - ATTACHMENTS
        - in: query
          name: ignoreStatements
          schema:
            type: boolean
          required: false
          description: |
            Filters the list to ignore [statements](/docs/glossory#statement).
            Default is true.
        - in: query
          name: query
          schema:
            type: string
          required: false
          description: A full-text search query that is matched against the order reference and email properties.
        - in: query
          name: sku
          schema:
            type: array
            items:
              type: string
          required: false
          description: A comma-separated list of product's SKUs. Be aware, that this parameter does only make sense for product reviews.
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: |
            Specify the date to sort the returned list of reviews by. Possible options:
            * `editedAt`: This is the date when the consumer last changed the review.It sorts the reviews in descending order using the `lastEditedAt` date
            * `updatedAt`:This is the date when the review was last updated. It sorts the reviews in descending order using the `updatedAt` date
            * `submittedAt`: This is the date when the review was created by the consumer. Reviews will be sorted by default in descending order using the `submittedAt` date if the **orderBy** parameter is not set or set to a non existing value.
      responses:
        "200":
          description: The list of reviews for the given channels or all channels.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerReviewListResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/reviews-minimal":
    get:
      operationId: getMinimalReviews
      summary: Get a list of reviews with fewer properties per each item.
      tags:
        - Endpoints
      description: |
        This endpoint retrieves reviews for a specific channel, a set of channels or for your entire account.

        The response items have fewer properties compared to that of the [/reviews](/reference/getreviews) endpoint which returns review items containing all properties.

        The results can be filtered by appending any of the provided query parameters to the endpoint URL. Remember to use `&` as a separator for multiple parameters  eg: `/reviews-minimal?channels=chl-xxx-yyyy&submittedAfter=2018-02-01T17:10:42.733Z`

        Also, for pagination, you have the following query parameters `count`, `after` and `before`.
        See our guide on [paginating response data](/reference/pagination) to learn how to use them.

        > **Custom Widget Implementation:** Please note the response may include rejected reviews when using a custom widget. To prevent these from appearing, filter out reviews with the `status` attribute set to `REJECTED`.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: query
          name: channels
          required: false
          schema:
            type: array
            items:
              type: string
          description: |
            The list of channels for which the list of reviews will be returned.

            Example: `channels=chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx1,chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx2`
        - in: query
          name: after
          schema:
            type: string
          required: false
          description: |
            `after` is a review ID. The list of reviews in the response will only contain reviews submitted earlier than the review with this ID.

            Example: `rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: before
          schema:
            type: string
          required: false
          description: |
            `before` is a review ID. The list of reviews in the response will only contain reviews submitted later than the review with this ID.

            Example: `rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
        - in: query
          name: submittedAfter
          schema:
            type: string
          required: false
          description: |
            `submittedAfter` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with a later timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: submittedBefore
          schema:
            type: string
          required: false
          description: |
            `submittedBefore` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with an earlier timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: count
          schema:
            type: integer
            default: 50
          required: false
          description: |
            The desired number of reviews to be retrieved per page.

            **NB: This can be set to any number from 1 to 5000 with 5000 being the maximum number of records you can get per a page.**
        - in: query
          name: rating
          description: |
            A comma-separated list of star ratings to be retrieved. If not set, all reviews are listed.

            Example: `1, 2, 5`
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 5
            items:
              type: integer
              enum: [1, 2, 3, 4, 5]
        - in: query
          name: status
          description: |
            A comma-separated list of statuses to be retrieved. If not set, all reviews are listed.

            The statuses you can filter for are:

            * `APPROVED`
            * `MODERATION`
            * `REJECTED`

            Example: `APPROVED, MODERATION`

            See [our glossary entry](/docs/glossory#review) for more information on review statuses.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - APPROVED
                - MODERATION
                - REJECTED
        - in: query
          name: type
          description: |
            A comma-separated list of review types to be retrieved.
            If not set, all reviews are listed.

            The review types are:

            * `SERVICE_REVIEW`
            * `PRODUCT_REVIEW`

            Example: `PRODUCT_REVIEW`

            See [our glossary entry](/docs/glossory#review) for more information on review states.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - PRODUCT_REVIEW
                - SERVICE_REVIEW
        - in: query
          name: hasReply
          description: |
            Reduces the list of reviews to only match reviews that either have been replied to or not. If not set, all reviews are listed.

            Example: `true`
          required: false
          schema:
            type: boolean
        - in: query
          name: ignoreStatements
          schema:
            type: boolean
          required: false
          description: |
            Filters the list to ignore [statements](/docs/glossory#statement).
            Default is true.
        - in: query
          name: query
          schema:
            type: string
          required: false
          description: A full-text search query that is matched against the order reference and email properties.
        - in: query
          name: sku
          schema:
            type: array
            items:
              type: string
          required: false
          description: A comma-separated list of product's SKUs. Be aware, that this parameter does only make sense for product reviews.
        - in: query
          name: orderBy
          schema:
            type: string
          required: false
          description: |
            Specify the date to sort the returned list of reviews by. Possible options:
            * `editedAt`: This is the date when the consumer last changed the review.It sorts the reviews in descending order using the `lastEditedAt` date
            * `updatedAt`:This is the date when the review was last updated. It sorts the reviews in descending order using the `updatedAt` date
            * `submittedAt`: This is the date when the review was created by the consumer. Reviews will be sorted by default in descending order using the `submittedAt` date if the **orderBy** parameter is not set or set to a non existing value.
      responses:
        "200":
          description: The list of reviews for the given channels or all channels.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MinimalCustomerReviewListResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/reviews/{reviewId}":
    get:
      summary: Get a review by ID
      operationId: getReview
      tags:
        - Endpoints
      description: |
        This endpoint retrieves a review by its ID.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
          description: |
            The review ID.

            Example: `rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx`
      responses:
        "200":
          description: The review with the specified ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerReviewResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/reviews/{reviewId}/vetos":
    post:
      summary: Create a veto for a review
      tags:
        - Endpoints
      operationId: createVeto
      description: |
        This endpoint creates a veto for the specified review.
        A veto flags a review as inappropriate and suggests that the review should be removed or investigated.
        Veto objects consist of a comment, a reason and the associated channel name.

        Note that whenever this method is called, eTrusted will create a ticket in Trusted Shops' Review Team board containing the veto data for further investigation.
      parameters:
        - name: reviewId
          in: path
          description: The review ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewVetoRequest"
      responses:
        "200":
          description: The veto has been saved succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewVetoResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    get:
      operationId: getReviewVeto
      summary: Get a review Veto by reviewID
      tags:
        - Endpoints
      description: |
        This endpoint retrieves the veto for a specific review.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - name: reviewId
          schema:
            type: string
          in: path
          required: true
          description: The review ID.
      responses:
        "200":
          description: The vetos for the given reviews.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewVetoResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/reviews/count":
    get:
      operationId: getReviewsCount
      summary: Get the total number of reviews based on a filter.
      tags:
        - Endpoints
      description: |
        This endpoint retrieves count of reviews for a specific channel
        The result set can be modified using a set of filters.
        Query parameters can be added to the request, separated by `&`.
      parameters:
        - name: Authorization
          schema:
            type: string
          in: header
          required: true
          description: An OAuth2 authorization header with an access token, see [OAuth2](/reference/authentication-2)
        - in: query
          name: channels
          required: false
          schema:
            type: array
            items:
              type: string
          description: |
            The list of channels for which the list of reviews will be returned.

            Example: `channels=chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx1,chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxx2`
        - in: query
          name: submittedAfter
          schema:
            type: string
          required: false
          description: |
            `submittedAfter` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with a later timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: submittedBefore
          schema:
            type: string
          required: false
          description: |
            `submittedBefore` is a timestamp in the ISO 8601 and RFC3339 compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            The list of reviews will only contain reviews submitted with an earlier timestamp.

            Example: `2018-02-01T17:10:42.733Z`
        - in: query
          name: rating
          description: |
            A comma-separated list of star ratings to be retrieved. If not set, all reviews are listed.

            Example: `1, 2, 5`
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 5
            items:
              type: integer
              enum: [1, 2, 3, 4, 5]
        - in: query
          name: status
          description: |
            A comma-separated list of statuses to be retrieved. If not set, all reviews are listed.

            The statuses you can filter for are:

            * `APPROVED`
            * `MODERATION`
            * `REJECTED`

            Example: `APPROVED, MODERATION`

            See [our glossary entry](/docs/glossory#review) for more information on review statuses.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - APPROVED
                - MODERATION
                - REJECTED
        - in: query
          name: type
          description: |
            A comma-separated list of review types to be retrieved.
            If not set, all reviews are listed.

            The review types are:

            * `SERVICE_REVIEW`
            * `PRODUCT_REVIEW`

            Example: `PRODUCT_REVIEW`

            See [our glossary entry](/docs/glossory#review) for more information on review states.
          required: false
          schema:
            type: array
            items:
              type: string
              x-extensible-enum:
                - PRODUCT_REVIEW
                - SERVICE_REVIEW
        - in: query
          name: hasReply
          description: |
            Reduces the list of reviews to only match reviews that either have been replied to or not. If not set, all reviews are listed.

            Example: `true`
          required: false
          schema:
            type: boolean
        - in: query
          name: ignoreStatements
          schema:
            type: boolean
          required: false
          description: |
            Filters the list to ignore [statements](/docs/glossory#statement).
            Default is true.
        - in: query
          name: query
          schema:
            type: string
          required: false
          description: A full-text search query that is matched against the order reference and email properties.
        - in: query
          name: sku
          schema:
            type: array
            items:
              type: string
          required: false
          description: A comma-separated list of product's SKUs. Be aware, that this parameter does only make sense for product reviews.
      responses:
        "200":
          description: The count of reviews for the given channel.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelReviewCountResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  "/reviews/{reviewId}/reply":
    post:
      summary: Save a review reply
      description: Reply to a review
      tags:
        - Endpoints
      operationId: saveReviewReply
      security:
        - BearerAuth: []
      parameters:
        - name: reviewId
          in: path
          description: The review ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewReply"
      responses:
        "200":
          description: The review reply was saved.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
    delete:
      summary: Delete a review reply
      description: Delete a reply to a review. **NB:** Because you can only have a single reply to a review you only need to provide the review id to delete it.
      tags:
        - Endpoints
      operationId: deleteReviewReply
      security:
        - BearerAuth: []
      parameters:
        - name: reviewId
          in: path
          description: The review ID.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The review reply was deleted.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CustomerReviewResponse:
      description: A single retrieved customer review.
      type: object
      required:
        - _object
        - id
        - accountRef
        - channelRef
        - rating
        - title
        - comment
        - createdAt
        - updatedAt
        - submittedAt
        - state
        - type
        - questionnaire
      properties:
        _object:
          type: string
          description: The object type of this response object, which is `CustomerReview`.
          example: CustomerReview
        id:
          type: string
          description: The customer review UUID.
          example: rev-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        accountRef:
          type: string
          description: A UUID as account reference.
          example: acc-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        channelRef:
          type: string
          description: A UUID as channel reference.
          example: chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        inviteRef:
          type: string
          description: A UUID as invite reference.
          example: inv-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        rating:
          type: number
          description: |
            The star rating.

            The value ranges from `1.0` to `5.0`.
          example: 4.60
        title:
          type: string
          description: A title headline for this customer review.
          example: Great experience
        comment:
          type: string
          description: The review text for this customer review.
          example: Everything went well. Very helpful staff!
        createdAt:
          type: string
          format: date-time
          description:
            The date and time when the customer review was stored initially, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            This date will be after `submittedAt` for imported reviews.
          example: "2018-02-01T17:09:41.790Z"
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the customer review was last modified, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:09:41.790Z"
        submittedAt:
          type: string
          format: date-time
          description: The date and time when the customer review was submitted by the reviewer, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:09:41.790Z"
        feedbackType:
          $ref: "#/components/schemas/FeedbackType"
        state:
          $ref: "#/components/schemas/ReviewState"
        type:
          $ref: "#/components/schemas/Type"
        verificationType:
          $ref: "#/components/schemas/VerificationType"
        reply:
          $ref: "#/components/schemas/CustomerReviewReply"
        customer:
          type: object
          description: This object holds information about the customer who wrote the review.
          properties:
            firstName:
              type: string
              description: The first name of the customer.
              example: John
            lastName:
              type: string
              description: The last name of the customer.
              example: Doe
            fullName:
              type: string
              description: The full name of the customer.
              example: John Doe
            email:
              type: string
              description: An email address of the customer.
              example: john.doe@example.com
            mobile:
              type: string
              description: A mobile phone number of the customer.
              example: "+123456789"
        transaction:
          type: object
          description: The transaction associated with the customer review.
          required:
            - reference
          properties:
            reference:
              type: string
              description: The transaction reference, e.g. `ORDER-12345`.
              example: ORDER-12792
            date:
              type: string
              format: date-time
              description: The date and time when the transaction took place, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
              example: "2018-01-04T12:09:50.722Z"
        event:
          type: object
          description: The event object that is associated with the customer review.
          required:
            - id
            - type
          properties:
            id:
              type: string
              description: The event UUID.
              example: evt-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
            type:
              type: string
              description: The [event type](https://developers.etrusted.com/glossary.html#event-type).
              example: checkout
        metadata:
          type: object
          description: The `metadata` object is a collection of user-defined data added to the customer review.
          example:
            customParam1: customVal1
            customParam2: customVal2
        surveyData:
          type: object
          description: |
            The `surveyData` object holds custom response data from additional questions from *eTrusted* questionnaires.
          example:
            responseParam1: responseVal1
            responseParam2: responseVal2
        questionnaire:
          type: object
          description: The questionnaire that was used to collect the customer review.
          required:
            - id
            - locale
            - templateRef
          properties:
            id:
              type: string
              description: The questionnaire UUID.
              example: qre-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
            locale:
              type: string
              description: The questionnaire [locale](#tag/Locales).
              example: en_GB
            templateRef:
              type: string
              description: A UUID as questionnaire template reference.
              example: qrt-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        hasAttachments:
          type: boolean
          description: |
            This indicates if the whether the customer review has attachments, such as images.
        additionalInformation:
          type: object
          description: This object containts all of the additional information that is stored with the customer review.
          properties:
            veto:
              type: object
              description: The veto of this customer review.
              required:
                - createdAt
                - reason
                - comment
                - ticketId
              properties:
                createdAt:
                  type: string
                  format: date-time
                  description: The date and time when the veto was created, in the [ISO 8601](iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format yyyy-MM-dd’T’HH:mm:ss.SSSZ.
                  example: 2018-02-01T17:09:41.790Z
                comment:
                  type: string
                  description: The comment in the ticket that was created internally at *Trusted Shops* for this veto.
                  example: "Example comment"
                reason:
                  type: string
                  description: |
                    The reason for this veto.

                    This string may only have the following values:

                    * `UNTRUTHFUL`
                    * `ABUSIVE`
                    * `VIOLATES_THE_TERMS_OF_USE`
                  x-extensible-enum:
                    - UNTRUTHFUL
                    - ABUSIVE
                    - VIOLATES_THE_TERMS_OF_USE
                ticketId:
                  type: string
                  description: |
                    A reference to the ticket that was created internally at *Trusted Shops* for this veto.
                    The ID is a sequence of six digits.
                  example: "123123"
            attachments:
              description: Holds information about the attachments of this customer review.
              properties:
                images:
                  type: array
                  description: |
                    This is a list of image objects.

                    Each image object represents a single image attached to this customer review.
                  items:
                    type: object
                    required:
                      - id
                      - extensions # should be renamed to extension too (see below)
                      - urlOriginal
                      - pathOriginal
                      - pathThumbnail
                      - pathLarge
                    properties:
                      id:
                        type: string
                        description: |
                          The attachment UUID.
                        example: atc-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
                      extensions: #can this be renamed to extension?
                        type: string
                        description: |
                          The extension of the image.
                        example: "png"
                      urlOriginal:
                        type: string
                        description: |
                          The url to the original image in original size.
                        example: "https://attachments.etrusted.koeln/attachments/id/more/directories/image.png"
                      pathOriginal:
                        type: string
                        description: |
                          The path to the original image in original size.
                        example: "/attachments/id/more/directories/image.png"
                      pathThumbnail:
                        type: string
                        description: |
                          The path to the thumbnail image.
                        example: "/attachments/id/more/directories/image.png"
                      pathLarge:
                        type: string
                        description: |
                          The path to the image in large size.
                        example: "/attachments/id/more/directories/image.png"
            originalReview:
              type: object
              description: This object contains the original review, in case the consumer edited their review via our B2C world.
              properties:
                rating:
                  type: number
                  description: |
                    The star rating before the changes.

                    The value ranges from `1.0` to `5.0`.
                title:
                  type: string
                  description: A title headline for this customer review before any changes.
                  example: Great experience
                comment:
                  type: string
                  description: The review text for this customer review before any changes.
                  example: Everything went well. Very helpful staff!
                reply:
                  $ref: "#/components/schemas/CustomerReviewReply"
        product:
          $ref: "#/components/schemas/CustomerReviewResponseProduct"
        editedAt:
          type: string
          format: date-time
          description:
            The date and time when the customer review was last edited by the consumer via our B2C world, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            Will not be present in the response when the review was never edited by the consumer.
          example: "2018-02-01T17:09:41.790Z"
        originalReview:
          $ref: "#/components/schemas/OriginalReview"
    InternalCustomerReviewResponse:
      description: A single retrieved customer review for internal usage.
      type: object
      required:
        - id
        - accountRef
        - channelRef
        - channelName
        - rating
        - title
        - comment
        - createdAt
        - updatedAt
        - submittedAt
        - state
        - type
      properties:
        id:
          type: string
          description: The customer review UUID.
          example: rev-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        accountRef:
          type: string
          description: A UUID as account reference.
          example: acc-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        channelRef:
          type: string
          description: A UUID as channel reference.
          example: chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        channelName:
          type: string
          description: Name of the corresponding channel.
          example: Good Channel
        rating:
          type: number
          description: |
            The star rating.

            The value ranges from `1.0` to `5.0`.
          example: 4.60
        title:
          type: string
          description: A title headline for this customer review.
          example: Great experience
        comment:
          type: string
          description: The review text for this customer review.
          example: Everything went well. Very helpful staff!
        createdAt:
          type: string
          format: date-time
          description:
            The date and time when the customer review was stored initially, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            This date will be after `submittedAt` for imported reviews.
          example: "2018-02-01T17:09:41.790Z"
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the customer review was last modified, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:09:41.790Z"
        submittedAt:
          type: string
          format: date-time
          description: The date and time when the customer review was submitted by the reviewer, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:09:41.790Z"
        feedbackType:
          $ref: "#/components/schemas/FeedbackType"
        state:
          $ref: "#/components/schemas/ReviewState"
        type:
          $ref: "#/components/schemas/Type"
        verificationType:
          $ref: "#/components/schemas/VerificationType"
        reply:
          $ref: "#/components/schemas/CustomerReviewReply"
        customer:
          type: object
          description: This object holds information about the customer who wrote the review.
          properties:
            firstName:
              type: string
              description: The first name of the customer.
              example: John
            lastName:
              type: string
              description: The last name of the customer.
              example: Doe
            fullName:
              type: string
              description: The full name of the customer.
              example: John Doe
            email:
              type: string
              description: An email address of the customer.
              example: john.doe@example.com
            mobile:
              type: string
              description: A mobile phone number of the customer.
              example: "+123456789"
        transaction:
          type: object
          description: The transaction associated with the customer review.
          required:
            - reference
          properties:
            reference:
              type: string
              description: The transaction reference, e.g. `ORDER-12345`.
              example: ORDER-12792
            date:
              type: string
              format: date-time
              description: The date and time when the transaction took place, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
              example: "2018-01-04T12:09:50.722Z"
        locale:
          type: string
          description: The channel's [locale](#tag/Locales).
          example: en_GB
        hasAttachments:
          type: boolean
          description: |
            This indicates if the whether the customer review has attachments, such as images.
        attachments:
          description: Holds information about the attachments of this customer review.
          properties:
            images:
              type: array
              description: |
                This is a list of image objects.

                Each image object represents a single image attached to this customer review.
              items:
                type: object
                required:
                  - id
                  - extensions # should be renamed to extension too (see below)
                  - urlOriginal
                  - pathOriginal
                  - pathThumbnail
                  - pathLarge
                properties:
                  id:
                    type: string
                    description: |
                      The attachment UUID.
                    example: atc-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
                  extensions: #can this be renamed to extension?
                    type: string
                    description: |
                      The extension of the image.
                    example: "png"
                  urlOriginal:
                    type: string
                    description: |
                      The url to the original image in original size.
                    example: "https://attachments.etrusted.koeln/attachments/id/more/directories/image.png"
                  pathOriginal:
                    type: string
                    description: |
                      The path to the original image in original size.
                    example: "/attachments/id/more/directories/image.png"
                  pathThumbnail:
                    type: string
                    description: |
                      The path to the thumbnail image.
                    example: "/attachments/id/more/directories/image.png"
                  pathLarge:
                    type: string
                    description: |
                      The path to the image in large size.
                    example: "/attachments/id/more/directories/image.png"
        editedAt:
          type: string
          format: date-time
          description:
            The date and time when the customer review was last edited by the consumer via our B2C world, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            Will not be present in the response when the review was never edited by the consumer.
          example: "2018-02-01T17:09:41.790Z"
        productName:
          type: string
          description: |
            The product name contains information about a product that is associated with the customer review.
            E.g. `Specialbrand T-Shirt White M`.
          example: Specialbrand T-Shirt White M
        tracking:
          $ref: "#/components/schemas/Tracking"
    MinimalCustomerReviewResponse:
      description: A single minimal retrieved customer review.
      type: object
      required:
        - id
        - channelRef
        - rating
        - title
        - comment
        - submittedAt
        - state
      properties:
        id:
          type: string
          description: The customer review UUID.
          example: rev-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        channelRef:
          type: string
          description: A UUID as channel reference.
          example: chl-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        rating:
          type: number
          description: |
            The star rating.

            The value ranges from `1.0` to `5.0`.
          example: 4.60
        title:
          type: string
          description: A title headline for this customer review.
          example: Great experience
        comment:
          type: string
          description: The review text for this customer review.
          example: Everything went well. Very helpful staff!
        submittedAt:
          type: string
          format: date-time
          description: The date and time when the customer review was submitted by the reviewer, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:09:41.790Z"
        state:
          $ref: "#/components/schemas/ReviewState"
        reply:
          $ref: "#/components/schemas/CustomerReviewReply"
        customer:
          type: object
          description: This object holds information about the customer who wrote the review.
          properties:
            firstName:
              type: string
              description: The first name of the customer.
              example: John
            lastName:
              type: string
              description: The last name of the customer.
              example: Doe
            fullName:
              type: string
              description: The full name of the customer.
              example: John Doe
            email:
              type: string
              description: An email address of the customer.
              example: john.doe@example.com
            mobile:
              type: string
              description: A mobile phone number of the customer.
              example: "+123456789"
        hasAttachments:
          type: boolean
          description: |
            This indicates if the whether the customer review has attachments, such as images.
        product:
          $ref: "#/components/schemas/CustomerReviewResponseProduct"
        editedAt:
          type: string
          format: date-time
          description:
            The date and time when the customer review was last edited by the consumer via our B2C world, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
            Will not be present in the response when the review was never edited by the consumer.
          example: "2018-02-01T17:09:41.790Z"
    CustomerReviewResponseProduct:
      description: The product data retrieved with the customer review.
      type: object
      required:
        - id
        - sku
        - name
        - url
      properties:
        id:
          type: string
          description: |
            The product UUID.
          example: prt-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        sku:
          type: string
          description: |
            The Stock Keeping Unit is a specific article number of the product, most often assigned by a specific retail shop as a scannable bar code.
            It lets the shops track movement of inventory.
            The SKU must be unique and usually consists of about 8 characters.
          example: 1234-TS-WH-M
        mpn:
          type: string
          description: |
            The Manufacturer Part Number is an identifier for a product by the manufacturer if applicable.
            In some cases it can serve as a substitute for the GTIN.
          example: "23687778"
        gtin:
          type: string
          description: |
            The GTIN is a unique string that identifies the product globally.
            A GTIN can be an ISBN, an EAN, and much more.
            Refer to [gtin.info](https://www.gtin.info/).
          example: 1234567890123
        name:
          type: string
          description: |
            The product name contains information about a product that is associated with the customer review.
            E.g. `Specialbrand T-Shirt White M`.
          example: Specialbrand T-Shirt White M
        url:
          type: string
          description: |
            The link to the product detail page in your online shop or public catalog (e.g. http://www.specialbrandshop.com/article123-TS-WH-M/).
          example: http://www.specialbrandshop.com/article123-TS-WH-M/
        imageUrl:
          type: string
          description: |
            The link to the product image of the product.
            eTrusted shows a picture of the product to the customer who wants to write a review.
            This makes it easier for customers to remember the purchase and recognize the product.
          example: https://www.specialbrandshop.com/article123-TS-WH-M/image.jpg
        brand:
          type: string
          description: |
            The brand of the product.
            A product can only have one brand.
          example: specialbrand
    CustomerReviewReply:
      type: object
      description: The reply to the customer review, written by the channel owner.
      required:
        - createdAt
        - updatedAt
        - comment
      properties:
        createdAt:
          type: string
          format: date-time
          description: The date and time when the reply was stored initially, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:10:42.733Z"
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the reply was last updated, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
          example: "2018-02-01T17:11:33.121Z"
        comment:
          type: string
          description: The text message of the reply.
          example: We appreciate your feedback.
        sendNotification:
          type: boolean
          description: Indicates whether the reviewer is notified about the reply by *eTrusted* or not.
    OriginalReview:
      type: object
      description: This is the initial unedited customer review. This object will not change when the review gets edited.
      properties:
        rating:
          type: number
          description: The original core review star rating. The value ranges from 1 to 5.
          example: "4"
        comment:
          type: string
          description: The original review comment. It is a string of up to 4000 characters.
          example: It was a very good experience. The service team is very friendly and the prices are good. I can only recommend this store.
        title:
          type: string
          description: The original review title.
          example: It was a very good experience.
        reply:
          type: object
          description: The original reply to the customer review, written by the channel owner.
          properties:
            replyComment:
              type: string
              description: The text message of the reply.
              example: We appreciate your feedback.
            replyCreatedAt:
              type: string
              format: date-time
              description: The date and time when the reply was stored initially, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
              example: "2018-02-01T17:10:42.733Z"
            replyUpdatedAt:
              type: string
              format: date-time
              description: The date and time when the reply was last updated, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format `yyyy-MM-dd’T’HH:mm:ss.SSSZ`. Check the [glossary](/docs/glossory#iso-8601) for examples of valid datetime formats.
              example: "2018-02-01T17:11:33.121Z"
    ReviewState:
      type: string
      description: |
        The state of the customer review when the API request was processed.
        See [our glossary entry](https://developers.etrusted.com/glossary.html#review) for more information on review states.
      enum:
        - SUBMITTED
        - APPROVED
        - REJECTED
        - MODERATION
        - DISCARDED
      example: "APPROVED"
    Tracking:
      type: object
      description: This object contains the tracking information for the review, such as the source, medium and client of the review.
      properties:
        source:
          type: string
          description: The service or the external source which the review was generated at.
          enum:
            - ETRUSTED
            - EXTERNAL
            - MYTS
          example: "ETRUSTED"
        medium:
          type: string
          description: Through which medium the review was generated.
          enum:
            - API
            - WIDGET
            - WEB_APP
            - MOBILE_APP
            - FILE_UPLOAD
            - QUESTIONNAIRE
          example: "API"
        client:
          type: string
          description: Additional information about the source of the review.
          example: "sftp_importer"
    FeedbackType:
      type: string
      description: |
        The feedback type which is determined by the customer review title, comment and rating.
        The type is `REVIEW` unless either the comment or the rating are missing. In that case it is `STATEMENT`.
      enum:
        - REVIEW
        - STATEMENT
    VerificationType:
      type: string
      description: |
        Specifies whether the collection method in combination with the provider/source can be trusted. A Review will be VERIFIED unless it comes from an external import by an account that is not explicitly marked as verified.
      enum:
        - VERIFIED
        - UNDEFINED
    Type:
      type: string
      description: |
        The customer review type.

        A service review is a review for a channel as a whole, e.g. a shop or a store, while a product review is tied to a single product.
      enum:
        - SERVICE_REVIEW
        - PRODUCT_REVIEW
    CustomerReviewListResponse:
      description: The list of retrieved reviews.
      type: object
      required:
        - totalElements
        - paging
        - items
      properties:
        totalElements:
          type: integer
          description: Deprecated. Use review/count. The value will return 0.
          example: 0
        paging:
          type: object
          description: The paging object holds pagination information for the reviews retrieved via this API.
          required:
            - count
            - cursor
            - links
          properties:
            count:
              type: integer
              description: |
                This is the number of reviews displayed in one page of the pagination.

                Note that this number might be lower than the `count` number in the request. This happens when the last page is reached.

                For example: A total number of 105 reviews are displayed in chunks of 20 reviews per page. The sixth and last page will only have 5 reviews. The `count` property will hold the value `5`.
              example: 10
            cursor:
              type: object
              description: The cursor object contains information to navigate to the previous and next pages in a subsequent request.
              required:
                - before
              properties:
                before:
                  type: string
                  description: This is a review ID to retrieve the previous page in the pagination.
                  example: rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx
                after:
                  type: string
                  description: This is a review ID to retrieve the next page in the pagination. It is empty if it is the last page in the pagination.
                  example: rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx
            links:
              description: |
                Links to the previous and next pages in the pagination.

                Note that the links contain the exact filter parameters that were used in the request (`rating`, `submittedBefore`, `submittedAfter`).
                This makes sure that the pagination is always relative to the same filter in subsequent requests.
                If developers build URLs themselves using `after`, `before`, and the matching information inside the `cursor` object, they may need to ensure to recreate the same filter as well.
              type: object
              required:
                - previous
              properties:
                previous:
                  type: string
                  description: The link to the previous page in the pagination.
                  example: https://api.etrusted.com/channels/{channelId}/customer-reviews?count=10&before=rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx
                next:
                  type: string
                  description: The link to the next page in the pagination. It is empty if it is the last page in the pagination.
                  example: https://api.etrusted.com/channels/{channelId}/customer-reviews?count=10&after=rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        items:
          type: array
          description: |
            This is the list of review objects.

            Each `item` object represents a single retrieved review.
          items:
            $ref: "#/components/schemas/CustomerReviewResponse"
    MinimalCustomerReviewListResponse:
      description: The list of retrieved reviews with mininal fields.
      type: object
      required:
        - paging
        - items
      properties:
        paging:
          type: object
          description: The paging object holds pagination information for the reviews retrieved via this API.
          required:
            - cursor
          properties:
            cursor:
              type: object
              description: The cursor object contains information to navigate to the previous and next pages in a subsequent request.
              required:
                - before
              properties:
                before:
                  type: string
                  description: This is a review ID to retrieve the previous page in the pagination.
                  example: rev-xxxxxxxa-yyyy-xxxx-yyyy-xxxxxxxxxxxx
                after:
                  type: string
                  description: This is a review ID to retrieve the next page in the pagination. It is empty if it is the last page in the pagination.
                  example: rev-xxxxxxxb-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        items:
          type: array
          description: |
            This is the list of review objects.

            Each `item` object represents a single retrieved review.
          items:
            $ref: "#/components/schemas/MinimalCustomerReviewResponse"
    ReviewVetoRequest:
      type: object
      properties:
        comment:
          type: string
          description: |
            The veto comment.
            Provide additional information on the review or your veto here.
          example: My veto comment.
        reason:
          type: string
          description: |
            The reason for the veto.

            This string may only have the following values:

            * `UNTRUTHFUL`
            * `ABUSIVE`,
            * `VIOLATES_THE_TERMS_OF_USE`
            * `INAPPROPRIATE_IMAGE`
          example: UNTRUTHFUL
          x-extensible-enum:
            - UNTRUTHFUL
            - ABUSIVE
            - VIOLATES_THE_TERMS_OF_USE
            - INAPPROPRIATE_IMAGE
        vetoReporterEmail:
          type: string
          description: |
            The E-Mail address of the veto reporter.
          example: my-name@my-domain.com
        channelName:
          type: string
          description: |
            The name of the channel the review is associated with.
          example: My channel name.
          deprecated: true
      required:
        - comment
        - reason
    ReviewVetoResponse:
      description: The veto has been saved successfully.
      type: object
      properties:
        id:
          type: string
          description: The veto UUID.
          example: vet-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx
        ticketId:
          type: string
          description: |
            A reference to the ticket that was created internally at Trusted Shops for this veto.
            The ID is a sequence of six digits.
          example: "123123"
        comment:
          type: string
          description: The comment in the ticket that was created internally at Trusted Shops for this veto.
          example: "example comment"
        reason:
          type: string
          description: |
            The reason for this veto.

            This string may only have the following values:

            * `UNTRUTHFUL`
            * `ABUSIVE`
            * `VIOLATES_THE_TERMS_OF_USE`
            * `INAPPROPRIATE_IMAGE`
          example: "UNTRUTHFUL"
          x-extensible-enum:
            - UNTRUTHFUL
            - ABUSIVE
            - VIOLATES_THE_TERMS_OF_USE
            - INAPPROPRIATE_IMAGE
        createdAt:
          type: string
          format: date-time
          description: The date and time when the veto was created, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format yyyy-MM-dd’T’HH:mm:ss.SSSZ.
          example: 2018-02-01T17:09:41.790Z
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the veto was last modified, in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) and [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant format yyyy-MM-dd’T’HH:mm:ss.SSSZ.
          example: 2018-02-01T17:09:41.790Z
      required:
        - id
        - ticketId
        - comment
        - reason
        - createdAt
    ChannelReviewCountResponse:
      description: The count of reviews for a channel.
      type: object
      properties:
        accountId:
          type: string
          description: The account ID
          example: "acc-xxxxxxxx-yyyy-xxxx-yyyy-xxxxxxxxxxxx"
        channelList:
          type: array
          description: The ID of the channels for which the review count will be returned.
          items:
            type: string
        totalElements:
          type: integer
          description: The amount of reviews of a channel dependant of filter
          example: "123123"
      required:
        - channelId
        - count
    ReviewReply:
      description: The reply to a review
      type: object
      properties:
        comment:
          type: string
          description: The value to be used as review reply comment.
        sendNotification:
          type: boolean
          description: The value to be used to send review reply notification.
          default: false
      required:
        - comment
x-readme:
  explorer-enabled: false
